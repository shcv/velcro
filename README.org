#+TITLE: Velcro

Master hook interceptor for Claude Code with dynamic handler management.

* Why Velcro?

Claude Code's native hooks are static - you edit JSON files and restart. Velcro makes hooks dynamic:

- *Enable/disable handlers without restarting* - Toggle handlers via MCP tools
- *Use npm packages* - Full Node.js ecosystem in your handlers
- *Test before deploying* - Run handlers with mock data
- *Query hook history* - All hooks logged to searchable JSONL
- *Import existing hooks* - Works with your current Claude setup

* Quick Start

#+begin_src bash
# Install
npm install && npm run build

# Add to Claude Code
./bin/velcro install-hooks

# Start server
./bin/velcro serve

# Import existing handlers (optional)
./bin/velcro import
#+end_src

* Example Handler

Block writes to sensitive files:

#+begin_src javascript
// Via MCP: velcro-hook add
if (hookData.tool_name === 'Write' && /\.env$/.test(hookData.tool_input.file_path)) {
  console.error('Blocked: Cannot modify .env files');
  process.exit(2); // Exit code 2 blocks the tool
}
#+end_src

* Handler Types

1. *Velcro* - JavaScript with npm packages
2. *Command* - Shell commands (Claude-compatible)  
3. *Script* - External script files

All handlers support:
- Tool filtering via regex matchers
- Exit codes: 0=success, 2=block, other=error
- Full hook data via stdin/arguments

* MCP Tools

- ~velcro-hook~ - Manage handlers (add, test, enable/disable)
- ~velcro-config~ - Update configuration
- ~velcro-package~ - Install npm packages for handlers
- ~velcro-log~ - Query hook execution logs
- ~velcro-monitor~ - Monitor handler performance

* Security Configuration

By default, Velcro only accepts connections from localhost for security. To enable remote access:

** Safe Remote Access (Recommended)

#+begin_src bash
# 1. Allow remote connections with OAuth requirement
velcro security allow-remote

# 2. Configure OAuth credentials
velcro security configure-oauth --client-id YOUR_ID --client-secret YOUR_SECRET

# 3. Check security status
velcro security status
#+end_src

** Disable Authentication (DANGEROUS)

⚠️ *WARNING*: This allows REMOTE CODE EXECUTION from any network client!

#+begin_src bash
# Only use in trusted, isolated environments
velcro security disable-auth --i-understand-the-risks
#+end_src

** Security Commands

- ~velcro security status~ - Show current security configuration
- ~velcro security allow-remote~ - Enable remote connections (with auth)
- ~velcro security localhost-only~ - Restrict to localhost only
- ~velcro security configure-oauth~ - Set OAuth credentials
- ~velcro security require-auth~ - Re-enable authentication requirement

* Architecture

#+begin_example
Claude Code → Hooks → Velcro → Log + Execute Handlers
                         ↓
                    MCP Server ← Claude UI
#+end_example

* Documentation

- [[file:docs/design.org][Design Document]] - Full architecture details
- [[file:docs/http-transport.org][HTTP Transport]] - MCP transport options
- [[file:docs/security.org][Security Guide]] - Security configuration and best practices
- [[file:examples/][Examples]] - Handler examples

* License

CC0 1.0 Universal - Public Domain Dedication